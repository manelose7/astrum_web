from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse, FileResponse, PlainTextResponse
from uuid import uuid4
from fastapi.middleware.cors import CORSMiddleware
import json
import os

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://astrum-web.vercel.app", "https://astrum-web.vercel.app/", "*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

HWID_BINDINGS_FILE = "hwid_bindings.json"
ALL_KEYS_FILE = "keys.txt"

def load_hwid_bindings():
    if os.path.exists(HWID_BINDINGS_FILE):
        try:
            with open(HWID_BINDINGS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except (json.JSONDecodeError, IOError):
            return {}
    return {}

def save_hwid_bindings(bindings):
    with open(HWID_BINDINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(bindings, f, ensure_ascii=False, indent=2)

def load_all_keys():
    if os.path.exists(ALL_KEYS_FILE):
        try:
            with open(ALL_KEYS_FILE, "r", encoding="utf-8") as f:
                return [line.strip() for line in f if line.strip()]
        except IOError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è keys.txt: {e}")
            return []
    print("‚ö†Ô∏è keys.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.")
    return []

@app.get("/")
def root():
    try:
        print("‚úÖ –ó–∞–ø—Ä–æ—Å –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É (/): –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–¥–∞—Ç—å index.html")
        return FileResponse("index.html")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–¥–∞—á–µ index.html: {e}")
        return JSONResponse(content={"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É"}, status_code=500)

@app.get("/generate-new-key")
async def generate_new_key():
    try:
        new_key = str(uuid4())
        with open(ALL_KEYS_FILE, "a", encoding="utf-8") as f:
            f.write(new_key + "\n")
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–ª—é—á: {new_key}")
        return PlainTextResponse(content=new_key)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞: {e}")
        return JSONResponse(content={"error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞"}, status_code=500)

@app.get("/list-keys")
async def list_keys_for_rayfield():
    try:
        all_keys = load_all_keys()
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–ª—è Rayfield. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(all_keys)}")
        return PlainTextResponse(content="\n".join(all_keys))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π Rayfield: {e}")
        return JSONResponse(content={"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π"}, status_code=500)

@app.post("/activate")
async def activate(request: Request):
    try:
        data = await request.json()
        key = data.get("key")
        hwid = data.get("hwid")
        
        print(f"üîë –ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: Key={key}, HWID={hwid}")

        if not key or not hwid:
            print("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: Key –∏–ª–∏ HWID –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return JSONResponse(content={"error": "key and hwid required"}, status_code=400)
        
        all_valid_keys = load_all_keys()
        if key not in all_valid_keys:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á: {key}")
            return JSONResponse(content={"error": "Invalid key"}, status_code=404)

        hwid_bindings = load_hwid_bindings()
        
        # –ï—Å–ª–∏ –∫–ª—é—á —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ HWID
        if key in hwid_bindings:
            if hwid_bindings[key] == hwid:
                print(f"‚úÖ –ö–ª—é—á {key} —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å HWID {hwid} (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ).")
                return JSONResponse(content={"status": "ok", "msg": "Key already activated"})
            else:
                print(f"‚ùå –ö–ª—é—á {key} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É HWID: {hwid_bindings[key]}. –¢–µ–∫—É—â–∏–π HWID: {hwid}.")
                return JSONResponse(content={"error": "Key already bound to another HWID"}, status_code=403)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–ª—é—á –∫ HWID
        hwid_bindings[key] = hwid
        save_hwid_bindings(hwid_bindings)
        
        print(f"‚úÖ –ö–ª—é—á {key} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ HWID: {hwid}.")
        return JSONResponse(content={"status": "ok", "msg": "Key activated successfully"})
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /activate: {e}")
        return JSONResponse(content={"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}, status_code=500)

@app.get("/keys")
def list_keys_info():
    try:
        all_keys = load_all_keys()
        hwid_bindings = load_hwid_bindings()
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å /keys: {len(all_keys)} –∫–ª—é—á–µ–π, {len(hwid_bindings)} –ø—Ä–∏–≤—è–∑–æ–∫.")
        return JSONResponse(content={
            "total_keys_in_file": len(all_keys),
            "activated_keys_count": len(hwid_bindings),
            "activated_keys_details": hwid_bindings
        })
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /keys: {e}")
        return JSONResponse(content={"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}, status_code=500)

import os

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse, FileResponse, PlainTextResponse
from uuid import uuid4
from fastapi.middleware.cors import CORSMiddleware
from supabase import create_client, Client
import json

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

SUPABASE_URL = os.environ.get("SUPABASE_URL")
SUPABASE_ANON_KEY = os.environ.get("SUPABASE_ANON_KEY")

if not SUPABASE_URL or not SUPABASE_ANON_KEY:
    raise ValueError("SUPABASE_URL and SUPABASE_ANON_KEY must be set in environment variables")

supabase: Client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)


# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# HWID_BINDINGS_FILE = "hwid_bindings.json"
# ALL_KEYS_FILE = "keys.txt"

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def load_hwid_bindings():
#     if os.path.exists(HWID_BINDINGS_FILE):
#         try:
#             with open(HWID_BINDINGS_FILE, "r", encoding="utf-8") as f:
#                 return json.load(f)
#         except (json.JSONDecodeError, IOError):
#             return {}
#     return {}

# def save_hwid_bindings(bindings):
#     with open(HWID_BINDINGS_FILE, "w", encoding="utf-8") as f:
#         json.dump(bindings, f, ensure_ascii=False, indent=2)

# def load_all_keys():
#     if os.path.exists(ALL_KEYS_FILE):
#         try:
#             with open(ALL_KEYS_FILE, "r", encoding="utf-8") as f:
#                 return [line.strip() for line in f if line.strip()]
#         except IOError as e:
#             print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è keys.txt: {e}")
#             return []
#     print("‚ö†Ô∏è keys.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.")
#     return []

@app.get("/")
def root():
    try:
        print("‚úÖ –ó–∞–ø—Ä–æ—Å –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É (/): –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–¥–∞—Ç—å index.html")
        return FileResponse("index.html")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–¥–∞—á–µ index.html: {e}")
        return JSONResponse(content={"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É"}, status_code=500)

@app.get("/generate-new-key")
async def generate_new_key():
    try:
        new_key = str(uuid4())
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –≤ Supabase
        response = supabase.from_("keys").insert({"key_value": new_key}).execute()
        if response.data:
            print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–ª—é—á –≤ Supabase: {new_key}")
            return PlainTextResponse(content=new_key)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∫–ª—é—á–∞ –≤ Supabase: {response.error}")
            return JSONResponse(content={"error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞"}, status_code=500)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /generate-new-key: {e}")
        return JSONResponse(content={"error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞"}, status_code=500)

@app.get("/list-keys")
async def list_keys_for_rayfield():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        response = supabase.table("keys").select("key_value").execute()
        
        if response.data:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –∫–∞–∫ plain text
            keys = [key['key_value'] for key in response.data]
            return PlainTextResponse("\n".join(keys))
        else:
            return PlainTextResponse("")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π: {e}")
        return PlainTextResponse("")

@app.post("/activate")
async def activate(request: Request):
    try:
        data = await request.json()
        key = data.get("key", "").strip()  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
        hwid = data.get("hwid", "").strip()
        
        print(f"üîë –ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:")
        print(f"   –ö–ª—é—á (RAW): '{data.get('key')}'")
        print(f"   –ö–ª—é—á (stripped): '{key}'")
        print(f"   HWID (RAW): '{data.get('hwid')}'")
        print(f"   HWID (stripped): '{hwid}'")

        if not key or not hwid:
            print("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: Key –∏–ª–∏ HWID –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return JSONResponse(content={
                "status": "error", 
                "error": "key and hwid required", 
                "details": {
                    "key_provided": bool(key),
                    "hwid_provided": bool(hwid)
                }
            }, status_code=400)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ –≤ Supabase
        response = supabase.from_("keys").select("*", count="exact").eq("key_value", key).execute()
        
        print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–∞: {response}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {response.count}")
        
        if not response.data or response.count == 0:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            all_keys_response = supabase.from_("keys").select("key_value").execute()
            all_keys = [item["key_value"] for item in all_keys_response.data or []]
            
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á: '{key}'")
            print(f"üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –≤ –±–∞–∑–µ: {all_keys}")
            
            return JSONResponse(content={
                "status": "error", 
                "error": "Invalid key", 
                "details": {
                    "key": key,
                    "keys_in_db": all_keys
                }
            }, status_code=404)

        key_data = response.data[0]
        print(f"üîê –î–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞: {key_data}")
        
        # –ï—Å–ª–∏ –∫–ª—é—á —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ HWID
        if key_data["hwid"]:
            if key_data["hwid"] == hwid:
                print(f"‚úÖ –ö–ª—é—á {key} —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å HWID {hwid} (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ).")
                return JSONResponse(content={
                    "status": "ok", 
                    "msg": "Key already activated",
                    "details": {
                        "key": key,
                        "hwid": hwid
                    }
                })
            else:
                print(f"‚ùå –ö–ª—é—á {key} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É HWID: {key_data['hwid']}. –¢–µ–∫—É—â–∏–π HWID: {hwid}.")
                return JSONResponse(content={
                    "status": "error", 
                    "error": "Key already bound to another HWID",
                    "details": {
                        "key": key,
                        "original_hwid": key_data['hwid'],
                        "current_hwid": hwid
                    }
                }, status_code=403)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–ª—é—á –∫ HWID
        update_response = supabase.from_("keys").update({"hwid": hwid}).eq("key_value", key).execute()
        
        print(f"üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_response}")
        
        if update_response.data:
            print(f"‚úÖ –ö–ª—é—á {key} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ HWID: {hwid} –≤ Supabase.")
            return JSONResponse(content={
                "status": "ok", 
                "msg": "Key activated successfully",
                "details": {
                    "key": key,
                    "hwid": hwid
                }
            })
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∫–ª—é—á–∞ –∫ HWID –≤ Supabase: {update_response.error}")
            return JSONResponse(content={
                "status": "error", 
                "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–ª—é—á–∞",
                "details": {
                    "key": key,
                    "hwid": hwid,
                    "supabase_error": str(update_response.error)
                }
            }, status_code=500)

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /activate: {e}")
        return JSONResponse(content={
            "status": "error", 
            "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "details": str(e)
        }, status_code=500)

@app.get("/keys")
def list_keys_info():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏
        all_keys_response = supabase.from_("keys").select("key_value").execute()
        all_keys = [item["key_value"] for item in all_keys_response.data] if all_keys_response.data else []

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ (—Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö hwid –Ω–µ NULL)
        activated_keys_response = supabase.from_("keys").select("key_value, hwid").not_("hwid", "is", None).execute()
        activated_keys_details = {item["key_value"]: item["hwid"] for item in activated_keys_response.data} if activated_keys_response.data else {}

        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å /keys –∏–∑ Supabase: {len(all_keys)} –∫–ª—é—á–µ–π, {len(activated_keys_details)} –ø—Ä–∏–≤—è–∑–æ–∫.")
        return JSONResponse(content={
            "total_keys_in_db": len(all_keys),
            "activated_keys_count": len(activated_keys_details),
            "activated_keys_details": activated_keys_details
        })
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /keys: {e}")
        return JSONResponse(content={"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}, status_code=500)
